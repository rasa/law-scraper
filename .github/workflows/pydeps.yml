---
# $schema https://json.schemastore.org/github-workflow.json
# ~/.github/workflows/pydeps.yaml
# checkov:skip=CKV_GHA_7:The build output cannot be affected by user parameters
#   other than the build entry point and the top-level source location.
#   GitHub Actions workflow_dispatch inputs MUST be empty.

name: pydeps

'on':
  schedule:
    # run every day at 15:00 UTC (08:00 PDT)
    - cron: '0 15 * * *'
  workflow_call:
    inputs:
      # checkov:skip=CKV_GHA_7
      mask:
        description: 'File mask for requirements*.txt file(s)'
        required: false
        type: string
        default: '**/*requirements*.txt'

  workflow_dispatch:
    inputs:
      # checkov:skip=CKV_GHA_7
      mask:
        description: 'File mask for requirements*.txt file(s)'
        required: false
        type: string
        default: '**/*requirements*.txt'

jobs:
  job:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        # shell: bash -v -x {0}
        shell: bash --noprofile --norc -e -o pipefail {0}
    strategy:
      fail-fast: true
      max-parallel: 1
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#choosing-github-hosted-runners
      matrix:
        os:
          - ubuntu-latest # aka ubuntu-22.04
          - windows-latest # aka windows-2022
          # - macos-latest # aka macos-12 (macos-13 in beta)
        python-version:
          - '3.10'
          - '3.11'
    steps:
      - name: USES actions/setup-python@v4.7.0
        uses: actions/setup-python@v4.7.0
        with:
          python-version: ${{ matrix.python-version }}
          # see https://stackoverflow.com/questions/73789054/reusable-github-action-workflow-with-actions-setup-python-fails-because-it-cant
          # cache: 'pip'
          # cache-dependency-path: '${{ inputs.mask }}'

      - name: RUN pip install --upgrade pip
        run:  python -m pip install --upgrade pip

      - name: RUN pip install pipdeptree pipreqs pur
        run: python -m pip install pipdeptree pipreqs pur

      - name: USES actions/checkout@v3.5.3
        uses: actions/checkout@v3.5.3
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
          fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.

      - name: RUN gather file list
        run: |
          dir=$(dirname '${{ inputs.mask }}')
          base=$(basename '${{ inputs.mask }}')
          if [[ "${dir}" == "**" ]]; then
            dir=.
            depth=99
          else
            depth=1
          fi
          mapfile -t < <(find "${dir}" -maxdepth "${depth}" -type f -iname "${base}")
          printf 'Found %d files matching %s:\n' "${#MAPFILE[@]}" '${{ inputs.mask }}'
          printf '%s\n' "${MAPFILE[@]}"
          ((${#MAPFILE[@]})) && mapfiles=$(printf '%s\n' "${MAPFILE[@]}" | base64 -w 0)
          printf 'mapfiles=%s\n' "${mapfiles:-}" >> "${GITHUB_ENV}"
        
      - name: RUN sed -E -i.bak -e '/^#/d; /^$/d;' requirements.txt
        run: |
          mapfile -t < <(base64 -d <<<"${mapfiles}")
          for file in "${MAPFILE[@]}"; do
            printf '\n%s:\n' "${file}"
            sed -E -i.bak -e '/^#/d; /^$/d;' "${file}"
            cat "${file}"
          done

      - name: RUN pipreqs --print --diff requirements.txt
        continue-on-error: true
        run: |
          mapfile -t < <(base64 -d <<<"${mapfiles}")
          for file in "${MAPFILE[@]}"; do
            printf '\n%s:\n' "${file}"
            python -m pipreqs.pipreqs --print --diff "${file}" 2>/dev/null
          done

      - name: RUN pur --dry-run --dry-run-changed --no-recursive --requirement requirements.txt
        continue-on-error: true
        run: |
          mapfile -t < <(base64 -d <<<"${mapfiles}")
          for file in "${MAPFILE[@]}"; do
            printf '\n%s: ' "${file}"
            out=$(python -m pur --dry-run --dry-run-changed --no-recursive --requirement "${file}")
            if [[ -z "${out}" ]]; then
              printf 'no changes found\n'
              continue
            fi
            printf 'changes found:\n%s\n'  "${out}"
          done

      - name: RUN pur --no-recursive --requirement requirements.txt
        continue-on-error: true
        run: |
          mapfile -t < <(base64 -d <<<"${mapfiles}")
          for file in "${MAPFILE[@]}"; do
              printf '\n%s: ' "${file}"
              out=$(python -m pur --no-recursive --requirement "${file}")
              if grep -q 'All requirements up-to-date' <<<"${out}"; then
                printf 'no changes found\n'
                continue
              fi
              printf 'changes found:\n%s\n'  "${out}"
          done

      - name: RUN pip install -r requirements.txt
        continue-on-error: true
        run: |
          mapfile -t < <(base64 -d <<<"${mapfiles}")
          for file in "${MAPFILE[@]}"; do
            printf '\n%s: ' "${file}"
            python -m pip install -r "${file}"
          done

      - name: RUN pipdeptree --warn silence
        continue-on-error: true
        run: |
          pipdeptree --warn silence

      - name: RUN pipdeptree --freeze --warn silence | grep -E '^[a-zA-Z0-9\-]+'
        continue-on-error: true
        run: |
          pipdeptree --freeze --warn silence | grep -E '^[a-zA-Z0-9\-]+'

# cSpell:ignore MAPFILE, mapfile, noprofile, norc, pipefail, pipreqs, pydeps, pipdeptree, pur

# eof
